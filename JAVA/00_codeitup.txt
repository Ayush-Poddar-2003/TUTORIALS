java was developed by james gasoling

c -> c++ -> java

java : pure oops

java is alive even after 30 years

usecase -
desktop app
mobile app
web app
embedded system

--------------- 1 ---------------------

java installation

--------------- 2 ---------------------

java features

simple
oops
robust : less prone to errors
secure
multithreading : multiple tasks simultaneously
Architecture neutral : platform independent
java -> compile -> byte code + jdk (this byte code can run on any machine)
portable

---------------- 3 ---------------

c++ vs java

cpp : 
platform dependent
supports goto, operator overloading, pointer, multiple inheritence
it uses a compiler
it supports call by value and call by reference
memory management is done using pointer
runtime error detection by programmer
libraries low lvl functions
procedural + oops
has ::, structure and union
it has new and delete keywrd for object management

java : 
platform independent
doesn't supports goto, operator overloading, pointer, multiple inheritence
it uses a compiler and interpreter
it supports call by value
memory management is done by system

------------------4--------------------

JVM : 
Java virtual machine provides runtime environment to execute java byte code
JVM doesn't understand java code directly,
hence we need to compile .java files --> .class files containg bytecode understandable by jvm

JRE : 
Java runtime environment provides the libraries used by JVM and other components
JRE = JVM + (libraries + other components)

JDK :
java development kit 
JDK = JRE + (compiler,debugger,etc.)

------------------5---------------------

TOKENS : keyword + identifier + literals + seprators + operators

------------------6---------------------

DATATYPE

VARIABLE

-------------------7--------------------

INCREMENT / DECREMENT OPERATOR

-------------------8--------------------

AND OR NOT

-------------------9----------------

    class class_name
    {
        public static void main(String[] s_name)
        {
            System.out.println("");
        }
    }

static help to call main function without any object
String ensures parameters ; 
can be String str[] or String[] str

-------------------10------------------

save java file to c\programfiles\java\bin
name same as class name
then open cmd go to c\programfiles\java\bin
write : javac file_name.java to compile( .java -> .class )
to intrepret output write : java file_name

--------------------11-------------------

the above process is chaos
to avoid we do set path

set environment variable 
click on path and edit
new and paste bin path

after which we can compile and save anywhere

---------------------12-----------------------

println to move cursor on next line
to concatenae sring and variable we use + sign

--------------------13------------------------

taking input
we can use Scanner or BufferedReader class

io package contains -> BufferedReader which contains -> readLine() to take input

    import java.io.*;
    class add{
        public static void main(String[] args)throws IOException{
            int a,b,c;
            BufferedReader br = new BufferedReader(new InputSreamReader(System.in));
            System.out.print("Enter First Number : ");
            a = Integer.parseInt(br.readLine());
            System.out.print("Enter Second Number : ");
            b = Integer.parseInt(br.readLine());
            c=a+b;
            System.out.println("Sum Of a and b is :"+c )
        }
    }
 
similarly we can use 
    Float.parseFloat(obj.readline());

------------------14-------------------------

using scanner class

util package contains -> Scanner Class which contains -> next(),nextInt(),nextFloat() to take input


    import java.util.Scanner;
    class add{
        public static void main(String[] args){
            int a,b,c;
            Scanner sc = new Scanner(System.in);   // scanner class ka ek obj naya bna parameter ke saath
            System.out.print("Enter First Number : ");
            a=sc.nextInt();
            System.out.print("Enter Second Number : ");
            b=sc.nextInt();
            c=a+b;
            System.out.println("Sum Of a and b is :"+c )
        }
    }

--------------------15-----------------

    import java.util.Scanner;
    class demons{
        public static void main(String args[]){
            int len,br,area;

            Scanner sc = new Scanner(System.in)

            System.out.println("Enter length : ");
            len = sc.nextInt();

            System.out.println("Enter breadth : ");
            br = sc.nextInt();

            area = len*br;

            System.out.println("Area of rectangle is : " + area);
        }
    }

-----------------16--------------------------

if else

they control the flow of execution hence called flow control

selection : if , switch
looping : while do-while for

-------------------17---------------

greater number program
------------------18--------------

odd even

-------------19---------------

calculator

---------------20-------------





------------------45-----------------

CLASS and object

    imoport java.util.Scanner
    Class add{
        int a, b;
        void getdata(){
            Scanner sc= new Scanner(System.in);
            System.out.println("Enter first number");
            a= sc nextInt();
            System.out.println("Enter second number");
            b= sc nextInt();
        }
        void showdata(){
            System.out.println("Output :"+ (a+b))
        }
    }

    Class demo{
        public satic void main(String args[]){
            add aa = new add(); //use aa for main objects
            aa.getdata();
            aa.putdata();
        }
    }

------------------52-----------------

object with argument and return

    import java.util.Scanner;
    Class reverse{
        int n;
        void getdata(int i){
           n = i;
        }
        void showdata(){
            int rev=0;
            while(n>0){
                rev = (rev*10)+ n%10;
                n = n/10;
            }
            return n;
        }
    }

    Class demo{
        public satic void main(String args[]){
            int m,val;
            reverse aa = new reverse();
            Scanner sc = new scanner(System.in); 
            System.out.println("Enter Number");
            m = sc.nextInt();
            aa.getdata(m);
            val = aa.putdata();
            }
    }

----------------------53--------------------

prime number

--------------------54----------------------

CONSTRUCTOR
- special member function
- use to initialise data members of a class
- same name of class name
- no return type
- no need to call explicitly, automatically called as object is made

TYPES
1. DEFAULT : No argumnets
2. PARAMETERIZED : with arguments

---------------------57---------------------

PARAMETERIZED CONSTRUCTOR

import java.util.Scanner;
class add{
    int a,b;

    add(){
        a=0;b=0;
    }

    add(int x,int y){
        a=x;
        b=y;
    }

    void input(){
        Scanner sc = new Scanner(System.in);
        a = sc.nextInt();
        b = sc.nextInt();
    }

    public static void main(String args[]){
        add aa = new add(); //default called
        add bb = new add(5,9); //parameterized called
    }
}


Constructor overloading : no. and type of parameter

---------------------58---------------------

INHERITENCE 
always better to use pre existing resource rather than writing complete again
- reusability
- java doesn't support multiple inheritence

TYPES:
1. SINGLE : 

---------------------59---------------------












EXCEPTION HANDLING
when we write program we may make some common mistakes while typing the program, a mistake may cause the program to produce unexpected results.
Errors are the wrongs that can make a program to go wrong
Due to errors the program may not work properly and hence the errors found and rectified

errors are classified into :
1. Compile Time errors
    All syntax errors that can be deteced and displayed by the java compiler,
    we rectify those errors and recompile

2. Run time errors
    even if our code compiles successfully but it gives strange results, may be due to wrong logic e.g.
    -> divide by 0
    -> accesing element beyonf index
    -> wrong datatype etc
    program terminates after exception


---------------------105------------------

Exception 
condition that is caused by the run time error, when java interpreter encounters a runtime error it creates an exception object and throws it (informs about the error)

Now if we have written the code to catch the exception and handle it properly, then our program will keep running otherwise the whole program will collapse

so the process of catching the exception thrown by the error condition and then display an apropriate message for the same is called exception handling

the purpose of exception handling mechanism is to provide a means to detect and report and exceptional circumstance so that appropriate action can be taken 

a seprate error handling code is made that performs

1. Find the exception(Hit the exception)
2. Inform the error(Throw the error)
3. Receive the error(Catch the exception)
4. Take action(Handle the exception) 

common java exception
-> ArithemeticException : maths errors
-> ArrayIndexOutOfBoundException : index error
-> ArrayStoreException : wrong datatype
-> FileNotFoundException : file doesn't exist
-> IOException : i/o failures
-> NullPointerException : referencing a null object
-> SecurityException : not alloawed by browser
-> OutOfMemoryException : no enough memory

-----------------------106 ----------------------

Exceptions in java can be :-

1. CHECKED : 
    -> handled in the code itself with help of try catch
    -> Extended from java.lang.Exception
    -> checked at compile time
    e.g. IOException, SQLException

2. UNCHECKED :
    -> not essentially handled in code
    -> JVM handles such exception
    -> Extended from java.lang.RuntimeException
    -> checked at runtime
    E.G. ArithemeticException, NullPointerException

syntax
    try{
        statement; //genrates an exception
    }
    catch(Exception-type e){
        statement; // processes the exception
    }

catch is written just after try 

---------------------------107------------------------

COMMAND LINE ARGUMENT
argument passed through command line while interpreting

class demo{
    public static void main(String args[]){
        int a, b, sum;
        a = Integer.parseInt(args[0]);
        b = Integer.parseInt(args[1]);
        sum = a+b;
        System.out.println("Sum"+sum);
    }
}

tu use this with command line :

    javac abc.java
    java abc 2 3 //this is how args are sent

--------------------------108----------------------------

